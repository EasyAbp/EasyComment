@using EasyAbp.EasyComment.Comments.Dtos
@using EasyAbp.EasyComment.Localization
@using EasyAbp.EasyComment.Permissions
@using EasyAbp.EasyComment.Web.Pages.Shared.Components.CommentEditorWidget
@using EasyAbp.EasyComment.Web.Pages.Shared.Components.CommentViewerWidget
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Users
@model EasyAbp.EasyComment.Web.Pages.Shared.Components.CommentsWidget.CommentsWidgetViewModel
@inject IHtmlLocalizer<EasyCommentResource> L
@inject ICurrentUser CurrentUser
@inject IAuthorizationService Authorization

<abp-container class="ec-comments" data-item-type="@Model.ItemType" data-item-key="@Model.ItemKey">
    <abp-row>
        <i class="fa fa-comments"> @L["TotalComments", Model.Comments.TotalCount]</i>
    </abp-row>
    @{ int i = 1; }
    @foreach (CommentDto comment in Model.Comments.Items)
    {
        <abp-container class="ec-comment" data-comment-id="@comment.Id" data-creator-id="@comment.CreatorId">
            <abp-row>
                <abp-column size="_10">
                    <abp-row>
                        <a class="ec-comment-link" href="#@comment.Id">#@(i++)</a>
                        <p class="ec-user-name">@comment.CreateUser.Name</p>
                        @if (comment.ReplyTo.HasValue)
                        {
                            <span class="ec-reply-to">@L["ReplyTo"]</span>
                            <p class="ec-user-name">@comment.ReplyToUser.Name</p>
                        }
                        <time class="ec-comment-time" datetime="@comment.CreationTime">@comment.CreationTime</time>
                    </abp-row>
                </abp-column>
                <abp-column size="_2" class="text-right">
                    @if (CurrentUser.IsAuthenticated)
                    {
                        <abp-dropdown>
                            <abp-dropdown-button button-type="Light" text="..." size="Medium"/>
                            <abp-dropdown-menu>
                                @if (comment.CreatorId == CurrentUser.GetId() ||
                                     await Authorization.IsGrantedAsync(EasyCommentPermissions.Comment.Update))
                                {
                                    <abp-dropdown-item class="ec-action-edit">@L["Edit"]</abp-dropdown-item>
                                }
                                <abp-dropdown-item class="ec-action-reply">@L["Reply"]</abp-dropdown-item>
                                <abp-dropdown-item class="ec-action-reference">@L["Reference"]</abp-dropdown-item>
                                @if (comment.CreatorId == CurrentUser.GetId() ||
                                     await Authorization.IsGrantedAsync(EasyCommentPermissions.Comment.Delete))
                                {
                                    <abp-dropdown-divider/>
                                    <abp-dropdown-item class="ec-action-remove">@L["Remove"]</abp-dropdown-item>
                                }
                            </abp-dropdown-menu>
                        </abp-dropdown>
                    }
                </abp-column>
            </abp-row>
            <div class="ec-comment-holder">
                @await Component.InvokeAsync("CommentViewerWidget", new CommentViewerWidgetParameter {Id = comment.Id, Content = comment.Content,})
            </div>
            <hr/>
        </abp-container>
    }
    
    <abp-row h-align="Center">
        <abp-button class="ec-button-load-more-comments" button-type="Link" text="@L["LoadMoreComments"].Value" data-total-count="@Model.TotalCount" data-load-count="@Model.LoadCount"></abp-button>
    </abp-row>
    
    @if (CurrentUser.IsAuthenticated)
    {
        <div class="ec-comment-holder">
            @await Component.InvokeAsync("CommentEditorWidget", new CommentEditorWidgetParameter {Label = L["LeaveComment"].Value,})
        </div>
    }
</abp-container>